import streamlit as st
import os
import cv2
import pandas as pd
import time
import re
import uuid
import config
import plotly.express as px
import subprocess
import queue
from streamlit_webrtc import webrtc_streamer, VideoTransformerBase, RTCConfiguration, WebRtcMode

# Import c√°c h√†m ch·ª©c nƒÉng t·ª´ c√°c module ƒë√£ t·∫°o
from app.detector import (
    predict_image_ensemble,
    predict_video_ensemble,
    process_realtime_frame_fast,
)
from app.utils import (
    get_history,
    log_prediction,
    check_for_notification,
    save_suspicious_frame,
    review_suspicious_frame,
)
from streamlit_option_menu import option_menu


# --- C·∫•u h√¨nh trang ---
st.set_page_config(page_title="Faceless...", page_icon="ü§ñ", layout="wide")


# --- H√†m ti·ªán √≠ch ---
def sanitize_filename(filename):
    """L√†m s·∫°ch t√™n file ƒë·ªÉ tr√°nh l·ªói."""
    name, ext = os.path.splitext(filename)
    sanitized_name = re.sub(r"[^a-zA-Z0-9_-]", "", name)
    return (
        f"{sanitized_name}{ext}"
        if sanitized_name
        else f"upload_{uuid.uuid4().hex[:8]}{ext}"
    )


# --- Giao di·ªán Sidebar ---
with st.sidebar:
    selected = option_menu(
        "Faceless Menu",
        ["Home", "Real-time", "History", "Admin", "About"],
        icons=["house", "camera-video", "clock-history", "shield-lock", "info-circle"],
        default_index=0,
    )
    notification = check_for_notification()
    if notification:
        st.sidebar.warning(notification)


# --- C√°c trang ch·ª©c nƒÉng ---
def page_home():
    st.title("üß† Deepfake Detection Dashboard")

    if "results" not in st.session_state:
        st.session_state.results = None

    uploaded_file = st.file_uploader(
        "Ch·ªçn file ·∫£nh ho·∫∑c video", type=["jpg", "png", "mp4"]
    )

    if uploaded_file is not None:
        st.session_state.results = None
        st.info(f"ƒê√£ t·∫£i l√™n file: **{uploaded_file.name}**")

        if st.button("üöÄ B·∫Øt ƒë·∫ßu ph√¢n t√≠ch", type="primary", use_container_width=True):
            clean_filename = sanitize_filename(uploaded_file.name)
            temp_filepath = os.path.join(config.UPLOAD_FOLDER, clean_filename)
            with open(temp_filepath, "wb") as f:
                f.write(uploaded_file.getbuffer())

            with st.spinner("ƒêang ph√¢n t√≠ch, xin ch·ªù trong gi√¢y l√°t..."):
                path_to_save = None
                if uploaded_file.type.startswith("image"):
                    results = predict_image_ensemble(temp_filepath)
                    results["file_type"] = "image"
                    path_to_save = temp_filepath
                else:
                    video_results = predict_video_ensemble(temp_filepath)
                    if video_results:
                        (
                            label, conf, grad_path, eff, vit, frame_path, ann_vid_path,
                        ) = video_results
                        results = {
                            "label": label, "confidence": conf, "gradcam_path": grad_path,
                            "eff_score": eff, "vit_score": vit,
                            "annotated_image_path": ann_vid_path,
                            "file_type": "video",
                        }
                        path_to_save = frame_path
                    else:
                        st.error("Kh√¥ng th·ªÉ x·ª≠ l√Ω video.")
                        return

                st.session_state.results = results
                # C·∫¢I TI·∫æN 3: THAY ƒê·ªîI M√ÄU TH√îNG B√ÅO
                log_prediction(
                    {
                        "filename": clean_filename,
                        "label": results["label"],
                        "confidence": f"{results['confidence']:.2f}",
                        "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
                    }
                )
                st.toast("ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o l·ªãch s·ª≠!", icon="‚úÖ")

                if (
                    results["label"] == "FAKE"
                    and results["confidence"] >= config.SELF_TRAIN_THRESHOLD
                    and path_to_save
                ):
                    save_suspicious_frame(cv2.imread(path_to_save))
                    st.toast("ƒê√£ l∆∞u frame ƒë√°ng ng·ªù ƒë·ªÉ hu·∫•n luy·ªán l·∫°i!", icon="‚ö†Ô∏è")

    if st.session_state.results:
        results = st.session_state.results
        st.success("Ph√¢n t√≠ch ho√†n t·∫•t!")

        # C·∫¢I TI·∫æN 1: C√ÇN ƒê·ªêI B·ªê C·ª§C K·∫æT QU·∫¢ TRONG 1 TRANG
        st.divider()
        st.subheader("B√°o c√°o Ph√¢n t√≠ch Tr·ª±c quan")
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("##### üñºÔ∏è File k·∫øt qu·∫£ (ƒë√£ t√≠ch h·ª£p landmark)")
            if results["file_type"] == "image":
                st.image(results["annotated_image_path"])
            else:
                if results["annotated_image_path"] and os.path.exists(results["annotated_image_path"]):
                    st.video(results["annotated_image_path"])
                else:
                    st.warning("Kh√¥ng th·ªÉ t·∫°o video k·∫øt qu·∫£.")
        with col2:
            st.markdown("##### üß† V√πng AI ch√∫ √Ω (Grad-CAM)")
            if results["gradcam_path"] and os.path.exists(results["gradcam_path"]):
                st.image(results["gradcam_path"])
            else:
                st.warning("Kh√¥ng c√≥ ·∫£nh Grad-CAM.")

        st.divider()
        st.subheader("Ph√°n quy·∫øt t·ª´ AI")
        if results["label"] == "FAKE":
            st.error(
                f"**K·∫øt qu·∫£: {results['label']}** (ƒê·ªô tin c·∫≠y: {results['confidence']:.2f}%)"
            )
        else:
            st.success(
                f"**K·∫øt qu·∫£: {results['label']}** (ƒê·ªô tin c·∫≠y: {results['confidence']:.2f}%)"
            )

        with st.expander("Xem chi ti·∫øt ƒëi·ªÉm s·ªë t·ª´ c√°c m√¥ h√¨nh"):
            score_col1, score_col2 = st.columns(2)
            score_col1.metric("EfficientNet Score", f"{results['eff_score']:.2f}%")
            score_col2.metric("ViT Score", f"{results['vit_score']:.2f}%")

# --- L·ªöP X·ª¨ L√ù VIDEO CHO WEBRTC ---
class DeepfakeVideoTransformer(VideoTransformerBase):
    def __init__(self):
        self.frame_count = 0
        # T·∫°o m·ªôt h√†ng ƒë·ª£i (queue) ƒë·ªÉ l∆∞u k·∫øt qu·∫£
        self.result_queue = queue.Queue()

    def recv(self, frame):
        img = frame.to_ndarray(format="bgr24")
        processed_img, label, confidence = process_realtime_frame_fast(img)
        
        # ƒê·∫∑t k·∫øt qu·∫£ v√†o h√†ng ƒë·ª£i ƒë·ªÉ giao di·ªán c√≥ th·ªÉ l·∫•y ra
        self.result_queue.put((label, confidence))
        
        self.frame_count += 1
        if self.frame_count % 30 == 0 and label == 'FAKE' and confidence >= config.SELF_TRAIN_THRESHOLD:
            save_suspicious_frame(img)
            
        return processed_img

# --- TRANG REAL-TIME ƒê√É ƒê∆Ø·ª¢C N√ÇNG C·∫§P HO√ÄN CH·ªàNH ---
def page_realtime():
    st.title("üé• Real-time Deepfake Detection")
    st.info("Nh·∫•n 'START' v√† cho ph√©p tr√¨nh duy·ªát truy c·∫≠p camera c·ªßa b·∫°n.")

    col1, col2 = st.columns([3, 2]) # Chia c·ªôt, c·ªôt video l·ªõn h∆°n

    with col1:
        # Component ch√≠nh ƒë·ªÉ hi·ªÉn th·ªã video
        webrtc_ctx = webrtc_streamer(
            key="deepfake-detection",
            mode=WebRtcMode.SENDRECV,
            video_processor_factory=DeepfakeVideoTransformer,
            media_stream_constraints={"video": True, "audio": False},
            async_processing=True,
            rtc_configuration={"iceServers": [{"urls": ["stun:stun.l.google.com:19302"]}]}
        )

    with col2:
        st.subheader("üìä Th·ªëng k√™ Real-time")
        # T·∫°o c√°c khung tr·ªëng ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£
        label_placeholder = st.empty()
        confidence_placeholder = st.empty()

    # V√≤ng l·∫∑p ƒë·ªÉ c·∫≠p nh·∫≠t giao di·ªán th·ªëng k√™
    if webrtc_ctx.state.playing and webrtc_ctx.video_processor:
        while True:
            try:
                # L·∫•y k·∫øt qu·∫£ m·ªõi nh·∫•t t·ª´ h√†ng ƒë·ª£i
                label, confidence = webrtc_ctx.video_processor.result_queue.get(timeout=1.0)
                
                # C·∫≠p nh·∫≠t c√°c khung tr·ªëng
                if label == "FAKE":
                    label_placeholder.metric("K·∫øt qu·∫£", "FAKE", "üî¥ Nguy c∆° cao")
                else:
                    label_placeholder.metric("K·∫øt qu·∫£", "REAL", "üü¢ An to√†n")
                confidence_placeholder.metric("ƒê·ªô tin c·∫≠y", f"{confidence:.2f}%")
            except queue.Empty:
                # N·∫øu kh√¥ng c√≥ k·∫øt qu·∫£ m·ªõi, ti·∫øp t·ª•c v√≤ng l·∫∑p
                pass
            except Exception as e:
                # D·ª´ng v√≤ng l·∫∑p n·∫øu c√≥ l·ªói
                st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}")
                break

def page_history():
    st.title("üóÇÔ∏è L·ªãch s·ª≠ c√°c d·ª± ƒëo√°n")
    logs = get_history()
    if not logs:
        st.warning("Ch∆∞a c√≥ d·ªØ li·ªáu trong l·ªãch s·ª≠!")
    else:
        df = pd.DataFrame(logs)
        st.subheader("T·ª∑ l·ªá d·ª± ƒëo√°n Real/Fake")
        label_counts = df["label"].value_counts()
        fig = px.pie(values=label_counts.values, names=label_counts.index, title="T·ªïng quan k·∫øt qu·∫£",
                     color=label_counts.index, color_discrete_map={"REAL": "green", "FAKE": "red"})
        st.plotly_chart(fig, use_container_width=True)
        st.subheader("T√¨m ki·∫øm chi ti·∫øt")
        search_query = st.text_input("T√¨m ki·∫øm theo t√™n file:")
        if search_query:
            filtered_df = df[df["filename"].str.contains(search_query, case=False, na=False)]
            st.dataframe(filtered_df, use_container_width=True)
        else:
            st.dataframe(df, use_container_width=True)

def page_admin():
    st.title("üîë Admin Dashboard")

    if 'admin_logged_in' not in st.session_state:
        st.session_state.admin_logged_in = False

    if not st.session_state.admin_logged_in:
        try:
            correct_password = st.secrets.get("ADMIN_PASSWORD", "admin123")
        except Exception:
            correct_password = "admin123"

        password = st.text_input("Enter Admin Password", type="password")
        if password == correct_password:
            st.session_state.admin_logged_in = True
            st.rerun()
        elif password:
            st.error("M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c.")
    
    if st.session_state.admin_logged_in:
        st.success("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
        
        st.subheader("N√¢ng c·∫•p M√¥ h√¨nh AI")
        num_new_files = len(os.listdir(config.TRAINING_FAKE_DIR)) + len(os.listdir(config.TRAINING_REAL_DIR))
        st.info(f"Hi·ªán c√≥ **{num_new_files}** file m·ªõi s·∫µn s√†ng ƒë·ªÉ hu·∫•n luy·ªán.")
        
        if st.button("üöÄ B·∫Øt ƒë·∫ßu Hu·∫•n luy·ªán l·∫°i v·ªõi D·ªØ li·ªáu M·ªõi", disabled=(num_new_files == 0)):
            try:
                process = subprocess.Popen(["python", "retrain.py"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                st.info("Qu√° tr√¨nh hu·∫•n luy·ªán l·∫°i ƒë√£ b·∫Øt ƒë·∫ßu. Xem ti·∫øn tr√¨nh trong c·ª≠a s·ªï console.")
                st.warning("Sau khi ho√†n t·∫•t, b·∫°n c·∫ßn c·∫≠p nh·∫≠t file config.py v√† KH·ªûI ƒê·ªòNG L·∫†I ·ª©ng d·ª•ng.")
            except FileNotFoundError:
                st.error("L·ªói: Kh√¥ng t√¨m th·∫•y file 'retrain.py'.")

        st.divider()

        st.subheader("üñºÔ∏è C√°c Frame ƒë√°ng ng·ªù c·∫ßn xem x√©t")
        suspicious_files = os.listdir(config.SUSPICIOUS_FOLDER)
        if not suspicious_files:
            st.info("Hi·ªán kh√¥ng c√≥ frame n√†o c·∫ßn xem x√©t.")
        else:
            for filename in suspicious_files:
                filepath = os.path.join(config.SUSPICIOUS_FOLDER, filename)
                with st.container():
                    st.image(filepath, width=300)
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button("‚úÖ X√°c nh·∫≠n l√† FAKE", key=f"confirm_{filename}", use_container_width=True):
                            review_suspicious_frame(filename, "confirm_fake")
                            st.toast(f"{filename} ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v√†o training set (FAKE).", icon="‚úÖ")
                            st.rerun()
                    with col2:
                        if st.button("‚ùå B√°c b·ªè (l√† REAL)", key=f"reject_{filename}", use_container_width=True):
                            review_suspicious_frame(filename, "reject_real")
                            st.toast(f"{filename} ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v√†o training set (REAL).", icon="‚ùå")
                            st.rerun()
                    st.divider()

def page_about():
    st.title("‚ÑπÔ∏è Gi·ªõi thi·ªáu v·ªÅ D·ª± √°n 'Faceless'")
    st.markdown("""
    **Faceless** l√† m·ªôt d·ª± √°n demo nh·∫±m x√¢y d·ª±ng m·ªôt c√¥ng c·ª• ph√°t hi·ªán deepfake m·∫°nh m·∫Ω v√† tr·ª±c quan, 
    gi√∫p ng∆∞·ªùi d√πng d·ªÖ d√†ng x√°c th·ª±c t√≠nh ch√¢n th·ª±c c·ªßa n·ªôi dung s·ªë.

    ### C√¥ng ngh·ªá C·ªët l√µi
    ·ª®ng d·ª•ng ƒë∆∞·ª£c x√¢y d·ª±ng tr√™n m·ªôt n·ªÅn t·∫£ng c√¥ng ngh·ªá AI hi·ªán ƒë·∫°i:
    - **Ensemble Learning:** K·∫øt h·ª£p s·ª©c m·∫°nh c·ªßa hai ki·∫øn tr√∫c m√¥ h√¨nh h√†ng ƒë·∫ßu:
        - **EfficientNet (CNN):** T·∫≠p trung v√†o vi·ªác ph√¢n t√≠ch c√°c chi ti·∫øt nh·ªè, k·∫øt c·∫•u v√† c√°c sai s√≥t ·ªü c·∫•p ƒë·ªô pixel.
        - **Vision Transformer (ViT):** Ph√¢n t√≠ch c√°c m·ªëi quan h·ªá v√† s·ª± nh·∫•t qu√°n tr√™n to√†n b·ªô khu√¥n m·∫∑t.
    - **Explainable AI (XAI):**
        - **Grad-CAM:** Hi·ªÉn th·ªã b·∫£n ƒë·ªì nhi·ªát, cho bi·∫øt nh·ªØng v√πng n√†o tr√™n khu√¥n m·∫∑t m√† AI ch√∫ √Ω nh·∫•t ƒë·ªÉ ƒë∆∞a ra quy·∫øt ƒë·ªãnh.
    - **Facial Analysis:**
        - **MediaPipe:** S·ª≠ d·ª•ng l∆∞·ªõi 468 ƒëi·ªÉm m·ªëc ƒë·ªÉ ph√¢n t√≠ch v√† tr·ª±c quan h√≥a c·∫•u tr√∫c khu√¥n m·∫∑t, ho·∫°t ƒë·ªông hi·ªáu qu·∫£ tr√™n nhi·ªÅu g√≥c ƒë·ªô.

    ### C√°ch ho·∫°t ƒë·ªông
    1.  **ƒê·∫ßu v√†o:** Ng∆∞·ªùi d√πng t·∫£i l√™n ·∫£nh ho·∫∑c video.
    2.  **Ph√¢n t√≠ch song song:** C·∫£ hai m√¥ h√¨nh AI (EfficientNet v√† ViT) c√πng l√∫c ph√¢n t√≠ch n·ªôi dung.
    3.  **T·ªïng h·ª£p k·∫øt qu·∫£:** C√°c ƒëi·ªÉm s·ªë ƒë∆∞·ª£c k·∫øt h·ª£p ƒë·ªÉ ƒë∆∞a ra ph√°n quy·∫øt cu·ªëi c√πng v·ªõi ƒë·ªô tin c·∫≠y cao h∆°n.
    4.  **Tr·ª±c quan h√≥a:** C√°c k·∫øt qu·∫£ ph√¢n t√≠ch s√¢u nh∆∞ Grad-CAM v√† Landmark ƒë∆∞·ª£c t·∫°o ra v√† hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng.
    
    ### Tuy√™n b·ªë mi·ªÖn tr·ª´ tr√°ch nhi·ªám
    ƒê√¢y l√† m·ªôt s·∫£n ph·∫©m ph·ª•c v·ª• m·ª•c ƒë√≠ch h·ªçc t·∫≠p v√† demo. K·∫øt qu·∫£ do AI ƒë∆∞a ra ch·ªâ mang t√≠nh tham kh·∫£o v√† kh√¥ng ƒë·∫£m b·∫£o ch√≠nh x√°c 100%.
    """)

# --- ƒêi·ªÅu h∆∞·ªõng trang ---
if selected == "Home":
    page_home()
elif selected == "Real-time":
    page_realtime()
elif selected == "History":
    page_history()
elif selected == "Admin":
    page_admin()
elif selected == "About":
    page_about()